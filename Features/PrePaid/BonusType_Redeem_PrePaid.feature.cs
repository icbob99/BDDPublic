// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace LoyaltyAutoTest.Features.PrePaid
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BonusType_Redeem_PrePaid")]
    [NUnit.Framework.CategoryAttribute("PrePaidBonus")]
    public partial class BonusType_Redeem_PrePaidFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "PrePaidBonus"};
        
#line 1 "BonusType_Redeem_PrePaid.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/PrePaid", "BonusType_Redeem_PrePaid", "The feature tests all related scenarios for loading money on a rechargeable card." +
                    " \r\nWhen PrePaid Bonus Type is OnRedeem", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
#line 9
 testRunner.Given("I have a loyalty program with 5 new pre paid cards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.And("I\'m the owner of Card \"1000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("I\'m at Site 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("I configure the account to give bonus \'OnRedeem\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Change of Pre Paid Bonus Type from \'OnRedeem\' to \'OnLoad\' is forbidden after 1st " +
            "load on card")]
        public void ChangeOfPrePaidBonusTypeFromOnRedeemToOnLoadIsForbiddenAfter1StLoadOnCard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change of Pre Paid Bonus Type from \'OnRedeem\' to \'OnLoad\' is forbidden after 1st " +
                    "load on card", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 15
 testRunner.Given("I configure the Pre Paid Series to have Bonus of 10%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
 testRunner.And("I clear the card history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.When("I configure the account to give bonus \'OnLoad\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then("Pre Paid Bonus Type is \'OnLoad\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.When("I configure the account to give bonus \'OnRedeem\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
 testRunner.Then("Pre Paid Bonus Type is \'OnRedeem\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.When("I load the card with 90$", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
 testRunner.Then("the balance of the card is 99$", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.When("I configure the account to give bonus \'OnLoad\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then("I Get An Exception of type \"changePrepaidBonusTypeForbidden\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\'OnRedeem\' Bonus and constant bonus percentage")]
        [NUnit.Framework.CategoryAttribute("bonusdiscount_calculation")]
        public void OnRedeemBonusAndConstantBonusPercentage()
        {
            string[] tagsOfScenario = new string[] {
                    "bonusdiscount_calculation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\'OnRedeem\' Bonus and constant bonus percentage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 32
 testRunner.Given("I clear the card history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Bonus",
                            "Site",
                            "Amount",
                            "Balance",
                            "Paid Amount",
                            "Bonus Discount"});
                table1.AddRow(new string[] {
                            "load",
                            "10",
                            "1",
                            "90$",
                            "99$",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "15$",
                            "84$",
                            "13.64",
                            "1.36$"});
                table1.AddRow(new string[] {
                            "load",
                            "10",
                            "1",
                            "30$",
                            "117$",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "100$",
                            "17$",
                            "90.91$",
                            "9.09$"});
#line 34
 testRunner.When("I do the following prepaid actions with on Redeem Bonus", ((string)(null)), table1, "When ");
#line hidden
#line 41
 testRunner.And("I Pay 20$ And Exception Collect Is \"on\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.Then("I Get An Exception of type \"CustomInsufficientFunds\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\'OnRedeem\' Bonus use only 1st load")]
        [NUnit.Framework.CategoryAttribute("bonusdiscount_calculation")]
        public void OnRedeemBonusUseOnly1StLoad()
        {
            string[] tagsOfScenario = new string[] {
                    "bonusdiscount_calculation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\'OnRedeem\' Bonus use only 1st load", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 46
 testRunner.Given("I clear the card history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Bonus",
                            "Site",
                            "Amount",
                            "Balance",
                            "Paid Amount",
                            "Bonus Discount"});
                table2.AddRow(new string[] {
                            "load",
                            "10",
                            "1",
                            "90$",
                            "99$",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "15$",
                            "84$",
                            "13.64$",
                            "1.36$"});
                table2.AddRow(new string[] {
                            "load",
                            "20",
                            "1",
                            "30$",
                            "120$",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "20$",
                            "100$",
                            "18.18$",
                            "1.82$"});
                table2.AddRow(new string[] {
                            "load",
                            "0",
                            "1",
                            "33$",
                            "133$",
                            "",
                            ""});
                table2.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "21$",
                            "112$",
                            "19.09$",
                            "1.91$"});
#line 48
 testRunner.When("I do the following prepaid actions with on Redeem Bonus", ((string)(null)), table2, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\'OnRedeem\' Bonus use 2nd load money after 1st was finished")]
        [NUnit.Framework.CategoryAttribute("bonusdiscount_calculation")]
        public void OnRedeemBonusUse2NdLoadMoneyAfter1StWasFinished()
        {
            string[] tagsOfScenario = new string[] {
                    "bonusdiscount_calculation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\'OnRedeem\' Bonus use 2nd load money after 1st was finished", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 59
 testRunner.Given("I clear the card history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Bonus",
                            "Site",
                            "Amount",
                            "Balance",
                            "Paid Amount",
                            "Bonus Discount"});
                table3.AddRow(new string[] {
                            "load",
                            "10",
                            "1",
                            "90$",
                            "99$",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "15$",
                            "84$",
                            "13.64$",
                            "1.36$"});
                table3.AddRow(new string[] {
                            "load",
                            "20",
                            "1",
                            "30$",
                            "120$",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "84$",
                            "36$",
                            "76.36$",
                            "7.64$"});
                table3.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "24$",
                            "12$",
                            "20$",
                            "4$"});
#line 61
 testRunner.When("I do the following prepaid actions with on Redeem Bonus", ((string)(null)), table3, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\'OnRedeem\' Bonus use mixed (from 1st load and from 2nd)")]
        [NUnit.Framework.CategoryAttribute("bonusdiscount_calculation")]
        public void OnRedeemBonusUseMixedFrom1StLoadAndFrom2Nd()
        {
            string[] tagsOfScenario = new string[] {
                    "bonusdiscount_calculation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\'OnRedeem\' Bonus use mixed (from 1st load and from 2nd)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 71
 testRunner.Given("I clear the card history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Bonus",
                            "Site",
                            "Amount",
                            "Balance",
                            "Paid Amount",
                            "Bonus Discount"});
                table4.AddRow(new string[] {
                            "load",
                            "10",
                            "1",
                            "90$",
                            "99$",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "90$",
                            "9$",
                            "81.82$",
                            "8.18$"});
                table4.AddRow(new string[] {
                            "load",
                            "20",
                            "1",
                            "30$",
                            "45$",
                            "",
                            ""});
                table4.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "10$",
                            "35$",
                            "9.01$",
                            "0.99$"});
                table4.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "24$",
                            "11$",
                            "20$",
                            "4$"});
#line 73
 testRunner.When("I do the following prepaid actions with on Redeem Bonus", ((string)(null)), table4, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("\'OnRedeem\' Bonus use 1st load, 2nd & 3rd")]
        [NUnit.Framework.CategoryAttribute("bonusdiscount_calculation")]
        public void OnRedeemBonusUse1StLoad2Nd3Rd()
        {
            string[] tagsOfScenario = new string[] {
                    "bonusdiscount_calculation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("\'OnRedeem\' Bonus use 1st load, 2nd & 3rd", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 84
 testRunner.Given("I clear the card history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Bonus",
                            "Site",
                            "Amount",
                            "Balance",
                            "Paid Amount",
                            "Bonus Discount"});
                table5.AddRow(new string[] {
                            "load",
                            "10",
                            "1",
                            "90$",
                            "99$",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "15$",
                            "84$",
                            "13.64$",
                            "1.36$"});
                table5.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "84$",
                            "0$",
                            "76.36$",
                            "7.64$"});
                table5.AddRow(new string[] {
                            "load",
                            "20",
                            "1",
                            "30$",
                            "36$",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "20$",
                            "16$",
                            "16.67$",
                            "3.33$"});
                table5.AddRow(new string[] {
                            "load",
                            "0",
                            "1",
                            "33$",
                            "49$",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "21$",
                            "28$",
                            "18.33$",
                            "2.67$"});
                table5.AddRow(new string[] {
                            "pay",
                            "",
                            "1",
                            "28$",
                            "0$",
                            "28$",
                            "0$"});
#line 86
 testRunner.When("I do the following prepaid actions with on Redeem Bonus", ((string)(null)), table5, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
